services:
    # TODO: change _MANAGEMENT ending to _UM
    db_usermanagement:
        container_name: pong_um_db
        build: ../src/common_files/postgres
        environment:
            POSTGRES_DB: "${UM_POSTGRES_DB:-default_db}"
            POSTGRES_USER: "${UM_POSTGRES_USER:-posty}"
            POSTGRES_PASSWORD: "${UM_POSTGRES_PASSWORD:-insecurepass}"
            POSTGRES_ACCESS_USER: "${UM_POSTGRES_ACCESS_USER:-accessy}"
            POSTGRES_ACCESS_PASSWORD: "${UM_POSTGRES_ACCESS_PASSWORD:-accesspass}"
            POSTGRES_INITDB_ARGS: "-A scram-sha-256"

        expose:
            - 5432
        volumes:
            - volume_user_management:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${UM_POSTGRES_USER:-posty} -d ${UM_POSTGRES_DB:-default_db}",
                ]
            interval: 10s
            timeout: 5s
            retries: 4
        restart: on-failure
        networks:
            - network_user_management

    redis_usermanagement:
        container_name: pong_um_redis
        build: ../src/common_files/redis
        environment:
            REDIS_ADMIN_USER: ${UM_REDIS_ADMIN_USER:-redisadmin}
            REDIS_ADMIN_PASSWORD: ${UM_REDIS_ADMIN_PASSWORD:-redisadminpass}
            REDIS_USER: "${UM_REDIS_USER:-redisuser}"
            REDIS_PASSWORD: "${UM_REDIS_PASSWORD:-redispass}"
        expose:
            - 6379
        # entrypoint: ["sh", "/usr/local/bin/generate-redis-conf.sh"]
        # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 2s
            retries: 4
        networks:
            - network_redis_um

    usermanagement:
        container_name: pong_um
        build: ../src/user_management
        volumes:
            - ../src/user_management:/user_management
            - volume_images:/user_management/media_root
        expose:
            - "8000/tcp"
        environment:
            SERVER_URL: ${SERVER_URL:-https://localhost:8443}
            DEBUG: ${DEBUG:-False}

            DJ_SECRET_KEY: ${UM_DJ_SECRET_KEY:-random_for_dev_#^0%uiw_5fdsfdsfdsvcxvsEWvcxvzqca7(sm#(x9nnf*5(kjnk}
            DJ_ALLOWED_HOSTS: "${UM_DJ_ALLOWED_HOSTS:-localhost}" # TODO: needed?
            DB_HOST: "${UM_DB_HOST:-db_usermanagement}"

            REDIS_USER: "${UM_REDIS_USER:-redisuser}"
            REDIS_PASSWORD: "${UM_REDIS_PASSWORD:-redispass}"

            POSTGRES_DB: "${UM_POSTGRES_DB:-default_db}"
            POSTGRES_ACCESS_USER: "${UM_POSTGRES_ACCESS_USER:-accessy}"
            POSTGRES_ACCESS_PASSWORD: "${UM_POSTGRES_ACCESS_PASSWORD:-accesspass}"

            # TODO: delete dev vars or keep them but only create admin user if DEBUG = True?
            POSTGRES_USER: "${UM_POSTGRES_USER:-posty}"
            POSTGRES_PASSWORD: "${UM_POSTGRES_PASSWORD:-insecurepass}"
            
            PYTHONUNBUFFERED: 1
            DJ_SUDO_USERNAME: "${UM_DJ_SUDO_USERNAME:-admin}"
            DJ_SUDO_EMAIL: "${UM_DJ_SUDO_EMAIL:-admin@example.com}"
            DJ_SUDO_PASSWORD: "${UM_DJ_SUDO_PASSWORD:-transcendence}"

            TEST: "${UM_TEST:-False}"
        depends_on:
            db_usermanagement:
                condition: service_healthy
        restart: on-failure
        networks:
            - network_user_management
            - network_django
            - network_redis_um
        secrets:
            - public_key.pem
            - private_key.pem # TODO: !!! delete this line
