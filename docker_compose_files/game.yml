services:
  db_game:
    container_name: pong_game_db
    image: postgres:16
    environment: 
      POSTGRES_DB: "${GAME_POSTGRES_DB:-default_db}"
      POSTGRES_USER: "${GAME_POSTGRES_USER:-admin}"
      POSTGRES_PASSWORD:  "${GAME_POSTGRES_USER:-adminpass}"
      POSTGRES_ACCESS_USER: "${GAME_POSTGRES_ACCESS_USER:-game_accessy}"
      POSTGRES_ACCESS_PASSWORD: "${GAME_POSTGRES_ACCESS_PASSWORD:-accesspass}"
    expose:
      - "${DB_PORT_GAME:-5432}"
    volumes:
      - volume_game:/var/lib/postgresql/data
      - ../src/common_files/db_init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    # RUN postgres on different port
    # command: ["postgres", "-p", "5433"]
    # Now we need add -p "db_port"to the healthckeck
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${GAME_POSTGRES_ACCESS_USER:-game_accessy} -d ${GAME_POSTGRES_DB:-default_db}"]
      interval: 10s
      timeout: 5s
      retries: 4
    restart: on-failure
    networks:
      - network_game
    profiles:
      - all
      - game

  redis:
    container_name: pong_game_redis
    image: redis:alpine3.20
    # TODO: add a fix version for redis (not latest)
    environment: &redis_env
      REDIS_ADMIN_USER: ${G_REDIS_ADMIN_USER:-redisadmin}
      REDIS_ADMIN_PASSWORD: ${G_REDIS_ADMIN_PASSWORD:-redisadminpass}
      REDIS_USER: "${G_REDIS_USER:-redisuser}"
      REDIS_PASSWORD: "${G_REDIS_PASSWORD:-redispass}"


      # TODO: make an access user that can be used by the django container and the healthcheck:
      # to avoid attacks with malicious input on the redis server
    #command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"] # TODO: do not use sh -c but the command directly like in the offical description of the image
    volumes:
      - ./generate-redis-conf.sh:/usr/local/bin/generate-redis-conf.sh
    expose:
      - 6379
    entrypoint: ["sh", "/usr/local/bin/generate-redis-conf.sh"]
    #command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 4
    # TODO: do we need a volume for redis ?!! only if we want to persist the data on server shutdown
    networks:
      - network_redis_game
    profiles:
      - all
      - game

  # TODO change the environment variables with env variables and default values
  # also the django non admin user should be used - see the other .yml files
  game:
    container_name: pong_game
    build: ../src/game
    volumes:
      - ../src/game:/daphne
    expose:
      - "8000/tcp"
    environment:
      <<: *redis_env
      #REDIS_PASSWORD: "${REDIS_PASSWORD:-redispass}"
      PYTHONUNBUFFERED: 1
      DJANGO_SECRET_KEY: ${SECRET_KEY_GAME:-django-insecure-!zvi(%&9vx@h-3l*at0)7)9!xf&q%w67r0a92d-bfn%m6&sntn}
      DB_HOST: "${DB_HOST_GAME:-db_game}"
      DB_PORT: ${DB_PORT_GAME:-5432}
      POSTGRES_DB: "${GAME_POSTGRES_DB:-default_db}"
      POSTGRES_ACCESS_USER: "${GAME_POSTGRES_ACCESS_USER:-game_accessy}"
      POSTGRES_ACCESS_PASSWORD: "${GAME_POSTGRES_ACCESS_PASSWORD:-accesspass}"
    depends_on:
      db_game:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    networks:
      - network_game
      - network_redis_game
      - network_django
    profiles:
      - all
      - game
