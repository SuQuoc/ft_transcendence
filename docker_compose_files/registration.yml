services:

  db_registration:
    container_name: db_registration
    image: postgres:16
    environment:
      POSTGRES_DB: "${POSTGRES_DB_REG:-reg_postgress_db}"
      POSTGRES_USER: "${POSTGRES_USER_REG:-reg_postgress_user}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD_REG:-reg_postgress_password}"
      POSTGRES_ACCESS_USER: "${POSTGRES_ACCESS_USER_REG:-reg_postgress_access_user}"
      POSTGRES_ACCESS_PASSWORD: "${POSTGRES_ACCESS_PASSWORD_REG:-reg_postgress_access_password}"
    expose:
      - "${DB_PORT_REG:-5432}"
    volumes:
      - volume_registration:/var/lib/postgresql/data
      - ../src/common_files/db_init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_REG:-reg_postgress_user} -d ${POSTGRES_DB_REG:-reg_postgress_db}"]
      interval: 10s
      timeout: 5s
      retries: 4
    restart: on-failure
    profiles:
      - registration
      - all
    networks:
      - network_registration

  registration:
    container_name: registration
    build: ../src/registration
    volumes:
      - ../src/registration:/app
    expose:
      - "8000:8000"
    environment:
      POSTGRES_DB: "${POSTGRES_DB_REG:-reg_postgress_db}"
      POSTGRES_ACCESS_USER: "${POSTGRES_USER_REG:-reg_postgress_access_user}"
      POSTGRES_ACCESS_PASSWORD: "${POSTGRES_PASSWORD_REG:-reg_postgress_access_password}"
      DB_HOST: "${DB_HOST_REG:-db_registration}"
      DB_PORT: "${DB_PORT_REG:-5432}"
      SECRET_KEY: ${SECRET_KEY_REG:-random_for_dev_#^0%uiw_5zqca7(sm#(x9nnf*5(kjnk}
      DEBUG: ${DJANGO_DEBUG_REG:-False}
    depends_on:
      db_registration:
        condition: service_healthy
    restart: on-failure
    profiles:
      - registration
      - all
    networks:
      - network_registration

  nginx_registration:
    container_name: nginx_registration
    build: ../src/registration_nginx
    ports:
      - 8000:443
    depends_on:
      - registration
    profiles:
      - registration
    networks: 
      - network_registration
