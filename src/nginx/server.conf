upstream game_container {
   server game:8000;
}

upstream user_management_container {
    server usermanagement:8000;
}

upstream registration_container {
    server registration:8000;
}

map $status $status_text {
  400 'Bad Request';
  401 'Unauthorized';
  402 'Payment Required';
  403 'Forbidden';
  404 'Not Found';
  405 'Method Not Allowed';
  406 'Not Acceptable';
  407 'Proxy Authentication Required';
  408 'Request Timeout';
  409 'Conflict';
  410 'Gone';
  411 'Length Required';
  412 'Precondition Failed';
  413 'Payload Too Large';
  414 'URI Too Long';
  415 'Unsupported Media Type';
  416 'Range Not Satisfiable';
  417 'Expectation Failed';
  418 'I\'m a teapot';
  421 'Misdirected Request';
  422 'Unprocessable Entity';
  423 'Locked';
  424 'Failed Dependency';
  425 'Too Early';
  426 'Upgrade Required';
  428 'Precondition Required';
  429 'Too Many Requests';
  431 'Request Header Fields Too Large';
  451 'Unavailable For Legal Reasons';
  500 'Internal Server Error';
  501 'Not Implemented';
  502 'Bad Gateway';
  503 'Service Unavailable';
  504 'Gateway Timeout';
  505 'HTTP Version Not Supported';
  506 'Variant Also Negotiates';
  507 'Insufficient Storage';
  508 'Loop Detected';
  510 'Not Extended';
  511 'Network Authentication Required';
  default 'Something is wrong';
}


# https://ssl-config.mozilla.org/#server=nginx&version=1.27.0&config=modern&openssl=3.0.2w&ocsp=false&guideline=5.7

server {

    # since we dont restrict the ip to listen on nginx uses this server block for all ip's of the machine
    # eg. 127.0.0.1:443 ssl, would tell nginx to only listen on 127.0.0.1
    # server_name localhost 10.3.2.3 example.com, define which requests this server block should handle
    listen 443 ssl;
    listen [::]:443 ssl; #[aguilmea] we should check if ipv6 works
    http2 on;

    ssl_certificate     /run/secrets/localhost.crt;
    ssl_certificate_key /run/secrets/localhost.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions

    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds) # [aguilme] need to check what it is
    add_header Strict-Transport-Security "max-age=63072000" always;

    # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#nginx

    #add_header X-XSS-Protection "1; mode=block";

    #################################### ADD SPA Pong content
    root /www/data;
    index index.html;

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /custom_error.html;

    location = /custom_error.html {
    ssi on; # server side includes
    ssi_types text/html;
    internal;
    root /www/data;
    }

    location / {
        try_files $uri $uri/ =404;
    }

    location /js/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Max-Age' 1728000;

        try_files $uri $uri/ =404;
    }
    ###################################
    location /daphne/ {
        proxy_pass http://game_container;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /um/ { #any URI starting with /um/ will be handled by proxy_pass http://user_management_group which is the name defined by #servername above
        proxy_pass http://user_management_container;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location /registration/ {
        proxy_pass http://registration_container;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # redirect all routes from js router to homepage on reload (not sure if final yet!!) (the response should maybe be changed!!)
    location /match {
        return 301 https://$host:8000/;
    }
    location /tournament {
        return 301 https://$host:8000/;
    }
    location /login {
        return 301 https://$host:8000/;
    }
    location /signup {
        return 301 https://$host:8000/;
    }
    location /displayname {
        return 301 https://$host:8000/;
    }
    location /friends {
        return 301 https://$host:8000/;
    }

    location /silk/ {
        proxy_pass http://registration/silk/;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location /static/silk/ {
        proxy_pass http://registration/static/silk/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /um/img/ {
        proxy_pass http://user_management_group/uploads/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /callback {
        if ($args) {
            rewrite ^/callback$ https://$host:8000?$args last;
        }
        rewrite ^/callback$ https://$host:8000 last;
    }
}
